#print(vector)
#print(scaled_vector)
#x <- data.frame("SN" = 1:2, "Age" = c(21,15), "Name" = c("John","Dora"))
x <- data.frame("label" = mnist.dat[,1], "vectorWeight" = scaled_vector)
print(x["vectorWeight"])
#use a dataframe to put the label and the scaled vector and use it
result <- multinom(x["vectorWeight"], x["label"])
summary(result)
x <- data.frame("label" = mnist.dat[,1], "vectorWeight" = scaled_vector)
print(x["vectorWeight"])
#use a dataframe to put the label and the scaled vector and use it
result <- multinom(x["vectorWeight"], x)
View(x)
result <- multinom(x)
summary(result)
print(x[1,0])
print(x[1,])
summarise_coord(result)
summary(result)
y <- c(mnist.dat[,1], vector) #table with not scaled vector
result2 <- multinom(y)
summary(result2)
y <- data.frame("label" = mnist.dat[,1], "vectorWeight" = vector) # x is our dataframe
result2 <- multinom(y)
summary(result2)
x <- data.frame("label" = mnist.dat[,1], "vectorWeight" = scaled_vector) # x is our dataframe
result <- multinom(x)
summary(result)
y <- data.frame("label" = mnist.dat[,1], "vectorWeight" = vector) # not scaled vector
result2 <- multinom(y)
summary(result2)
replace(mnist.dat, mnist.dat !=0, 1)
replace(mnist.dat, mnist.dat !=0, 1)
vector <- c(apply(mnist.dat != 0, 1, sum)) #number of zeroes grouped by 1, which means row
mean_number <- tapply(vector,mnist.dat[,1],mean) #mean
standard_dev <- tapply(vector,mnist.dat[,1],sd) #standard deviation
scaled_vector <- scale(vector, center = TRUE, scale = TRUE)
print(scaled_vector)
x <- data.frame("label" = mnist.dat[,1], "vectorWeight" = scaled_vector) # x is our dataframe
result <- multinom(x)
summary(result)
imageShow(matrix(as.numeric(mnist.dat[848,-1]),nrow=28,ncol=28,byrow=T))
newdata <- replace(mnist.dat, mnist.dat !=0, 1)
imageShow(matrix(as.numeric(newdata[848,-1]),nrow=28,ncol=28,byrow=T))
newdata <- replace(mnist.dat, mnist.dat !=0, 1)
imageShow(matrix(as.numeric(newdata[848,-1]),nrow=28,ncol=28,byrow=T))
vector <- c(apply(newdata != 0, 1, sum)) #number of zeroes grouped by 1, which means row
mean_number <- tapply(vector,newdata[,1],mean) #mean
standard_dev <- tapply(vector,newdata[,1],sd) #standard deviation
scaled_vector <- scale(vector, center = TRUE, scale = TRUE)
print(scaled_vector)
x <- data.frame("label" = mnist.dat[,1], "vectorWeight" = scaled_vector) # x is our dataframe
result <- multinom(x)
summary(result)
newdata <- replace(mnist.dat, mnist.dat !=0, 1)
imageShow(matrix(as.numeric(newdata[848,-1]),nrow=28,ncol=28,byrow=T))
Newvector <- c(apply(newdata != 0, 1, sum)) #number of zeroes grouped by 1, which means row
Newmean_number <- tapply(Newvector,newdata[,1],mean) #mean
Newstandard_dev <- tapply(Newvector,newdata[,1],sd) #standard deviation
Newscaled_vector <- scale(Newvector, center = TRUE, scale = TRUE)
print(Newscaled_vector)
c <- data.frame("label" = newdata[,1], "vectorWeight" = Newscaled_vector) # x is our dataframe
result3 <- multinom(x)
summary(result3)
newdata <- replace(mnist.dat, mnist.dat[,2:] !=0, 1)
imageShow(matrix(as.numeric(mnist.dat[848,-1]),nrow=28,ncol=28,byrow=T))
require(OpenImageR)
## for multinomial logit mode
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
#
mnist.dat <- read.csv("/Users/andrea/Desktop/PTRC/mnist.csv")
#attach(mnist.dat)
#imageShow(matrix(as.numeric(mnist.dat[848,-1]),nrow=28,ncol=28,byrow=T))
number <- c(mnist.dat[,1])
x <- c(0,0,0,0,0,0,0,0,0,0)
for (val in number){
if (val == 0){
x[1] <- x[1] + 1
}
if (val == 1){
x[2] <- x[2] + 1
}
if (val == 2){
x[3] <- x[3] + 1
}
if (val == 3){
x[4] <- x[4] + 1
}
if (val == 4){
x[5] <- x[5] + 1
}
if (val == 5){
x[6] <- x[6] + 1
}
if (val == 6){
x[7] <- x[7] + 1
}
if (val == 7){
x[8] <- x[8] + 1
}
if (val == 8){
x[9] <- x[9] + 1
}
if (val == 9){
x[10] <- x[10] + 1
}
}
vector <- c()
print(x)
print(sum(x)) # number 2 is the majority class !!remember the array position start at 1 !!
wrong_prediction <- sum(x) - max(x)
majority_percentage <- (max(x) * 100 )/sum(x)
vector <- c(apply(mnist.dat != 0, 1, sum)) #number of zeroes grouped by 1, which means row
mean_number <- tapply(vector,mnist.dat[,1],mean) #mean
standard_dev <- tapply(vector,mnist.dat[,1],sd) #standard deviation
scaled_vector <- scale(vector, center = TRUE, scale = TRUE)
print(scaled_vector)
x <- data.frame("label" = mnist.dat[,1], "vectorWeight" = scaled_vector) # x is our dataframe
result <- multinom(x)
summary(result)
y <- data.frame("label" = mnist.dat[,1], "vectorWeight" = vector) # not scaled vector
result2 <- multinom(y)
summary(result2)
confusionMatrix(result)
abc <- multinom.predict(result, x)
abc <- multinom.predict(result, x)
predict(model, scaled_vector)
x <- data.frame("label" = mnist.dat[,1], "vectorWeight" = scaled_vector) # x is our dataframe
model <- multinom(x)
summary(model)
predict(model, scaled_vector)
predict(model, x["vectorWeight"])
prediction <- predict(model, x["vectorWeight"])
summary(prediction)
print(x["vectorWeight"])
summary(prediction)
vector <- c(apply(mnist.dat != 0, 1, sum)) #number of zeroes grouped by 1, which means row
mean_number <- tapply(vector,mnist.dat[,1],mean) #mean
standard_dev <- tapply(vector,mnist.dat[,1],sd) #standard deviation
scaled_vector <- scale(vector, center = TRUE, scale = TRUE)
print(scaled_vector)
x <- data.frame("label" = mnist.dat[,1], "vectorWeight" = scaled_vector) # x is our dataframe
model <- multinom(x)
summary(model)
prediction <- predict(model, type = "probs", x["vectorWeight"])
summary(prediction)
View(model)
print(prediction)
prediction <- predict(model, x["vectorWeight"])
summary(prediction)
mnist.dat <- read.csv("/Users/andrea/Desktop/PTRC/mnist.csv")
require(OpenImageR)
## for multinomial logit mode
require(foreign)
require(nnet)
require(ggplot2)
require(reshape2)
#
mnist.dat <- read.csv("/Users/andrea/Desktop/PTRC/mnist.csv")
#attach(mnist.dat)
#imageShow(matrix(as.numeric(mnist.dat[848,-1]),nrow=28,ncol=28,byrow=T))
#SHOW THE IMAGE OF THE MEAN OF THE NUMBER, BUT CALCULATED FOR ROW, BECAUSE EVERY ROW IS A NUMBER
number <- c(mnist.dat[,1])
x <- c(0,0,0,0,0,0,0,0,0,0)
for (val in number){
if (val == 0){
x[1] <- x[1] + 1
}
if (val == 1){
x[2] <- x[2] + 1
}
if (val == 2){
x[3] <- x[3] + 1
}
if (val == 3){
x[4] <- x[4] + 1
}
if (val == 4){
x[5] <- x[5] + 1
}
if (val == 5){
x[6] <- x[6] + 1
}
if (val == 6){
x[7] <- x[7] + 1
}
if (val == 7){
x[8] <- x[8] + 1
}
if (val == 8){
x[9] <- x[9] + 1
}
if (val == 9){
x[10] <- x[10] + 1
}
}
vector <- c()
print(x)
print(sum(x)) # number 2 is the majority class !!remember the array position start at 1 !!
wrong_prediction <- sum(x) - max(x)
majority_percentage <- (max(x) * 100 )/sum(x)
vector <- c(apply(mnist.dat != 0, 1, sum)) #number of zeroes grouped by 1, which means row
mean_number <- tapply(vector,mnist.dat[,1],mean) #mean
standard_dev <- tapply(vector,mnist.dat[,1],sd) #standard deviation
scaled_vector <- scale(vector, center = TRUE, scale = TRUE)
print(scaled_vector)
x <- data.frame("label" = mnist.dat[,1], "vectorWeight" = scaled_vector) # x is our dataframe
model <- multinom(x)
summary(model)
#prediction <- predict(model, type = 'probs', x["vectorWeight"])
prediction <- predict(model, x["vectorWeight"])
summary(prediction)
#y <- data.frame("label" = mnist.dat[,1], "vectorWeight" = vector) # not scaled vector
#result2 <- multinom(y)
#summary(result2)
View(mnist.dat)
View(mnist.dat)
print(mnist.dat[1,])
newdata <- mnist.dat[1,]
meanOfNumb <- tapply(newdata,newdata != 0,mean) #mean
print(meanOfNumb)
newdata <- mnist.dat[1,]
meanOfNumb <- tapply(newdata,newdata != 0,mean) #mean
print(meanOfNumb)
newdata <- mnist.dat[1,]
meanOfNumb <- aggregate(newdata,newdata != 0,mean) #mean
print(meanOfNumb)
newdata <- mnist.dat[1,]
meanOfNumb <- aggregate(newdata,newdata != 0,mean) #mean
print(meanOfNumb)
newdata <- mnist.dat[1,]
meanOfNumb <- aggregate(newdata,newdata != 0,mean) #mean
print(meanOfNumb)
newdata <- mnist.dat[1,]
meanOfNumb <- aggregate(newdata,newdata != 0,mean) #mean
print(meanOfNumb)
newdata <- mnist.dat[1,]
meanOfNumb <- aggregate(newdata,newdata != 0,mean) #mean
print(meanOfNumb)
newdata <- mnist.dat[1,]
meanOfNumb <- aggregate(newdata,newdata != 0,mean) #mean
print(meanOfNumb)
newdata <- mnist.dat[1,]
count <- 0
total <- 0
for (val in newdata){
if (newdata[val] != 0){
total <- total + newdata[val]
count <- count + 1
}
}
meanOfNumb <- total / count
newdata <- mnist.dat[1,]
count <- 0
total <- 0
for (val in newdata){
if (newdata[val] != 0){
total <- total + newdata[val]
count <- count + 1
}
}
print(total)
length(which(newdata==0))
print(length)
length(which(newdata!=0))
print(length)
w(which(newdata!=0))
print(w)
print(sum(which(newdata!=0)))
print(mean(which(newdata!=0)))
newdata <- mnist.dat[1,]
media <- mean(which(newdata!=0)) #media dei valori che sono diversi da zero
newdata <- replace(newdata, newdata !=0, media)
newdata <- mnist.dat[1,]
media <- mean(which(newdata!=0)) #media dei valori che sono diversi da zero
newdata <- replace(newdata, newdata !=0, media)
imageShow(matrix(as.numeric(newdata),nrow=28,ncol=28,byrow=T))
newdata <- mnist.dat[2,]
media <- mean(which(newdata!=0)) #media dei valori che sono diversi da zero
newdata <- replace(newdata, newdata !=0, media)
imageShow(matrix(as.numeric(newdata),nrow=28,ncol=28,byrow=T))
newdata <- mnist.dat[1,]
media <- mean(which(newdata!=0)) #media dei valori che sono diversi da zero
newdata <- replace(newdata, newdata !=0, media)
imageShow(matrix(as.numeric(newdata),nrow=28,ncol=28,byrow=T))
imageShow(matrix(newdata))
imageShow(matrix(newdata))
imageShow(matrix(newdata))
imageShow(matrix(newdata))
imageShow(matrix(newdata))
imageShow(matrix(as.numeric(newdata),nrow=28,ncol=28,byrow=T))
newdata <- mnist.dat[3,]
media <- mean(which(newdata!=0)) #media dei valori che sono diversi da zero
newdata <- replace(newdata, newdata !=0, media)
imageShow(matrix(as.numeric(newdata),nrow=28,ncol=28,byrow=T))
newdata <- mnist.dat[5,]
media <- mean(which(newdata!=0)) #media dei valori che sono diversi da zero
newdata <- replace(newdata, newdata !=0, media)
imageShow(matrix(as.numeric(newdata),nrow=28,ncol=28,byrow=T))
plot(NULL, xlim = c(0, 3000), ylim = c(-2, 2), xlab="Trial time (ms)",
ylab="Lateral Position (m)", main="Simulated Data (based on original model)")
var <- 0
while(var < 20){
x <- seq(0, 3000, length=60)
hx <- c()
lat_dev <- 0
for (value in x){
lat_dev = rnorm(1,lat_dev,0.13)
hx <- c(hx, lat_dev)
}
#lines(x, hx, col = var)
hist(hx,	col=var)
var <- var +1
}
plot(NULL, xlim = c(0, 3000), ylim = c(-2, 2), xlab="Trial time (ms)",
ylab="Lateral Position (m)", main="Simulated Data (based on original model)")
var <- 0
while(var < 20){
x <- seq(0, 3000, length=60)
hx <- c()
lat_dev <- 0
for (value in x){
lat_dev = rnorm(1,lat_dev,0.13)
hx <- c(hx, lat_dev)
}
#lines(x, hx, col = var)
hist(hx,	col=var)
var <- var +1
}
plot(NULL, xlim = c(0, 3000), ylim = c(-2, 2), xlab="Trial time (ms)",
ylab="Lateral Position (m)", main="Simulated Data (based on original model)")
var <- 0
while(var < 20){
x <- seq(0, 3000, length=60)
hx <- c()
lat_dev <- 0
for (value in x){
lat_dev = rnorm(1,lat_dev,0.13)
hx <- c(hx, lat_dev)
}
#lines(x, hx, col = var)
hist(hx,	col=var)
var <- var +1
}
plot(NULL, xlim = c(0, 3000), ylim = c(-2, 2), xlab="Trial time (ms)",
ylab="Lateral Position (m)", main="Simulated Data (based on original model)")
var <- 0
while(var < 20){
x <- seq(0, 3000, length=60)
hx <- c()
lat_dev <- 0
for (value in x){
lat_dev = rnorm(1,lat_dev,0.13)
hx <- c(hx, lat_dev)
}
lines(x, hx, col = var)
#hist(hx,	col=var)
var <- var +1
}
plot(NULL, xlim = c(0, 3000), ylim = c(-2, 2), xlab="Trial time (ms)",
ylab="Lateral Position (m)", main="Simulated Data (based on original model)")
var <- 0
while(var < 20){
x <- seq(0, 3000, length=60)
hx <- c()
lat_dev <- 0
for (value in x){
lat_dev = rnorm(1,lat_dev,0.13)
hx <- c(hx, lat_dev)
}
lines(x, hx, col = var)
#hist(hx,	col=var)
var <- var +1
}
drift <- get(load("/Users/andrea/Desktop/TFCM/drift.Rdata"))
drift_short <- drift[with(drift, trialTime >= 15000 & trialTime <= 18000), ]
colors <- sample(colors(), 20)
plot(NULL, xlim = c(15000, 18000), ylim = c(-1, 1.5) )
#prende le righe in base al trial e te le disegna
i <- 1;
while(i <= 20) {
with(drift_short[drift_short$trial == i,] , lines(trialTime, posX, col = colors[i]))
posXs <- drift_short[with(drift_short, trial == i), ]$posX
hist(posXs, col = i)
i <- i + 1
}
drift <- get(load("/Users/andrea/Desktop/TFCM/drift.Rdata"))
drift_short <- drift[with(drift, trialTime >= 15000 & trialTime <= 18000), ]
colors <- sample(colors(), 20)
plot(NULL, xlim = c(15000, 18000), ylim = c(-1, 1.5) )
#prende le righe in base al trial e te le disegna
i <- 1;
while(i <= 20) {
with(drift_short[drift_short$trial == i,] , lines(trialTime, posX, col = colors[i]))
posXs <- drift_short[with(drift_short, trial == i), ]$posX
#hist(posXs, col = i)
i <- i + 1
}
hist(posXs, col = c("green", "pink"))
hist(posXs, col = c("green", "red"))
hist(hx, col = c("green", "pink"))
hist(hx, col = c("green", "blue"))
hist(posXs, col = c("green", "red"))
hist(hx, col = c("green", "blue"))
hist(main = "test, hx, col = c("green", "blue"))
hist(main = "test, hx, col = c("green", "blue"))
hist(main = "test, hx, col = c("green", "blue"))
hist(main = "test", hx, col = c("green", "blue"))
hist(main = "test", hx, col = c("green", "blue"))
hist(main = "test", hx, col = c("green", "blue"))
hist(main = "test", hx, col = c("green", "blue"))
hist(main = "Simulated Data", test = hx, col = c("green", "blue"))
hist(main = "Simulated Data", hx = "test", col = c("green", "blue"))
hist(main = "Simulated Data", hx = "test", col = c("green", "blue"))
hist(main = "Simulated Data", hx = "test", col = c("green", "blue"))
hist(main = "Simulated Data", hx = "test", col = c("green", "blue"))
hist(main = "Simulated Data", hx, xlab="test", col = c("green", "blue"))
hist(main = "Simulated Data", hx, xlab="Car Position", col = c("green", "blue"))
hist(main = "Human Trial",xlab="Car Position", posXg, col = c("green", "red"))
hist(main = "Human Trial",xlab="Car Position", posXg, col = c("green", "red"))
hist(main = "Human Trial",xlab="Car Position", posXg, col = c("green", "red"))
hist(main = "Human Trial",xlab="Car Position", posXg, col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
drift <- get(load("/Users/andrea/Desktop/TFCM/drift.Rdata"))
drift_short <- drift[with(drift, trialTime >= 15000 & trialTime <= 18000), ]
colors <- sample(colors(), 20)
plot(NULL, xlim = c(15000, 18000), ylim = c(-1, 1.5) )
#prende le righe in base al trial e te le disegna
i <- 1;
while(i <= 20) {
with(drift_short[drift_short$trial == i,] , lines(trialTime, posX, col = colors[i]))
posXg <- drift_short[with(drift_short, trial == i), ]$posX
#hist(posXs, col = i)
i <- i + 1
}
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, bxlab="Car Position", col = c("green", "red"))
hist(main = "Human Trial", posXg, xlab="Car Position", col = c("green", "red"))
drift <- get(load("/Users/andrea/Desktop/TFCM/drift.Rdata"))
drift_short <- drift[with(drift, trialTime >= 15000 & trialTime <= 18000), ]
colors <- sample(colors(), 20)
plot(NULL, xlim = c(15000, 18000), ylim = c(-1, 1.5) )
#prende le righe in base al trial e te le disegna
i <- 1;
while(i <= 20) {
with(drift_short[drift_short$trial == i,] , lines(trialTime, posX, col = colors[i]))
posXg <- drift_short[with(drift_short, trial == i), ]$posX
#hist(posXs, col = i)
i <- i + 1
}
hist(main = "Human Trial", posXg, xlab="Car Position", col = c("green", "red"))
plot(NULL, xlim = c(15000, 18000), ylim = c(-1, 1.5) )
drift <- get(load("/Users/andrea/Desktop/TFCM/drift.Rdata"))
drift_short <- drift[with(drift, trialTime >= 15000 & trialTime <= 18000), ]
colors <- sample(colors(), 20)
plot(NULL, xlim = c(15000, 18000), ylim = c(-1, 1.5) )
#prende le righe in base al trial e te le disegna
i <- 1;
while(i <= 20) {
with(drift_short[drift_short$trial == i,] , lines(trialTime, posX, col = colors[i]))
posXg <- drift_short[with(drift_short, trial == i), ]$posX
#hist(posXs, col = i)
i <- i + 1
}
drift <- get(load("/Users/andrea/Desktop/TFCM/drift.Rdata"))
drift_short <- drift[with(drift, trialTime >= 15000 & trialTime <= 18000), ]
colors <- sample(colors(), 20)
plot(NULL, xlim = c(15000, 18000), ylim = c(-1, 1.5) , ylab = "Deviation", xlab = "Time")
#prende le righe in base al trial e te le disegna
i <- 1;
while(i <= 20) {
with(drift_short[drift_short$trial == i,] , lines(trialTime, posX, col = colors[i]))
posXg <- drift_short[with(drift_short, trial == i), ]$posX
#hist(posXs, col = i)
i <- i + 1
}
drift <- get(load("/Users/andrea/Desktop/TFCM/drift.Rdata"))
drift_short <- drift[with(drift, trialTime >= 15000 & trialTime <= 18000), ]
colors <- sample(colors(), 20)
plot(NULL, xlim = c(15000, 18000), ylim = c(-1, 1.5) , ylab = "Lateral Position", xlab = "trialTime", main = "Drift Over Time")
drift <- get(load("/Users/andrea/Desktop/TFCM/drift.Rdata"))
drift_short <- drift[with(drift, trialTime >= 15000 & trialTime <= 18000), ]
colors <- sample(colors(), 20)
plot(NULL, xlim = c(15000, 18000), ylim = c(-1, 1.5) , ylab = "Lateral Position", xlab = "trialTime", main = "Drift Over Time")
#prende le righe in base al trial e te le disegna
i <- 1;
while(i <= 20) {
with(drift_short[drift_short$trial == i,] , lines(trialTime, posX, col = colors[i]))
posXg <- drift_short[with(drift_short, trial == i), ]$posX
#hist(posXs, col = i)
i <- i + 1
}
hist(main = "Human Trial", posXg, xlab="Car Position", col = c("green", "red"))
hist(main = "Simulated Data", hx, xlab="Car Position", col = c("green", "blue"))
stand_dev_human = sd(posXg)
print(stand_dev_human)
stand_dev_human = sd(posXg)
stand_dev_simulated = sd(hx)
print(stand_dev_human)
print(stand_dev_simulated)
